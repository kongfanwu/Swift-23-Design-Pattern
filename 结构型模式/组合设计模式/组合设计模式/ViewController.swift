//
//  ViewController.swift
//  组合设计模式
//
//  Created by wangyang on 2024/8/12.
/*
 组合设计模式（Composite Pattern）是一种结构型设计模式，它允许你将对象组合成树形结构以表示“部分-整体”的层次关系。这种模式的主要目的是使用户能够以一致的方式处理单个对象和组合对象，而无需区分它们之间的差异。以下是组合设计模式的详细解释：
 定义与特点
 定义：组合模式创建了对象组的树形结构，将对象组合成树状结构以表示“整体-部分”的关系。
 特点：
 一致性：客户端可以统一地使用组合结构和单个对象。
 递归性：组合模式通常使用递归的方式来处理组合对象和单个对象。
 可扩展性：可以轻松地增加新的组件，而无需修改现有代码。
 结构
 组合模式通常包含以下三种角色：
 抽象构件（Component）：定义了组合中所有对象的通用接口，可以是抽象类或接口。它为叶子对象和容器对象提供了一个公共的接口，客户端通过这个接口来访问和管理整个组合结构。
 叶子构件（Leaf）：是组合中的叶子节点对象，它没有子节点，实现了抽象构件的所有方法，通常代表了一些基本的操作或功能。
 容器构件（Composite）：是组合中的复合节点对象，它可以包含子节点（可以是叶子节点或其他复合节点）。容器构件实现了抽象构件的所有方法，并添加了管理子节点的方法，如添加、删除子节点等。
 优点
 简化客户端代码：客户端可以一致地处理单个对象和组合对象，无需区分它们的类型。
 增加新的构件更容易：只需实现抽象构件接口即可，无需修改现有代码。
 更好的扩展性：支持递归组合，可以构建出复杂的层次结构。
 缺点
 设计可能过于复杂：如果组合模式的层次结构过于复杂，可能会导致设计过度复杂，使代码难以理解和维护。
 性能问题：在处理层次结构较深、组件较多的情况下，递归操作可能会导致性能问题。
 应用场景
 组合模式非常适合用于处理树形结构的数据，如：
 图形界面库：在图形界面开发中，UI元素（如按钮、文本框等）和容器元素（如面板、窗口等）可以使用组合模式来构建复杂的用户界面。
 文件系统和目录结构：文件夹可以包含文件和其他文件夹，形成一个树形结构。通过组合模式，可以一致地处理文件和文件夹。
 组织架构和人员管理：在组织架构中，部门可以包含员工和其他部门，形成一个层次结构。通过组合模式，可以一致地管理单个员工和组合部门。
 菜单和菜单项：菜单系统通常包含菜单项和子菜单，可以使用组合模式来构建菜单层次结构。
 总之，组合模式是一种强大的设计模式，它允许你将对象组织成树形结构，并以一致的方式处理它们。这使得你的代码更加灵活、可扩展，并且易于维护。
 */

import UIKit

class ViewController: UIViewController {

    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    }
    func test() {
        // 使用示例
        let folder1 = Folder(name: "Documents")
        let folder2 = Folder(name: "Images")
        let file1 = File(name: "Report.docx")
        let file2 = File(name: "Photo.jpg")
          
        folder1.addItem(folder2)
        folder1.addItem(file1)
        folder2.addItem(file2)
          
        folder1.printStructure()
        /* 输出:
        + Documents
          + Images
            - Photo.jpg
          - Report.docx
        */
    }

}

